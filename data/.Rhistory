mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true","false")) %>%
mutate(region = case_when(region == "Yukon Territory" ~ "Yukon",
TRUE ~ region))
# Processed price data
write.csv(geocoded_df, "processed_data.csv")
# Local record of data dependencies
write.csv(ecp, "./local_copy_data_dependencies/ecp.csv")
write.csv(tcov, "./local_copy_data_dependencies/tcov.csv")
write.csv(codes, "./local_copy_data_dependencies/countries_codes_and_coordinates.csv")
######
# Download world geojson, merge price data, and export
######
# gjsf <- st_read("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson")
#
# # Local record of data dependencies
# st_write(gjsf, "./local_copy_data_dependencies/world.geojson")
#
# #Save priced worldmap
# gjsf_priced <- left_join(gjsf, geocoded_df, by = c("id" = "alpha_3"))
#
# gjsf_priced %>%
#   group_by(region) %>%
#   mutate(outline = case_when(year == max(year) ~  "true",
#                              TRUE ~ "false")
#         )
#
#
# st_write(gjsf_priced, "merged.geojson")
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
######
### Download, clean, and merge price data
######
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/total_coverage.csv")
ecp_sel <- ecp %>% select(Jurisdiction, Year, ecp_tax_jurCO2_2019USD, ecp_ets_jurCO2_2019USD, ecp_all_jurCO2_2019USD)
tcov_sel <- tcov %>% select(Jurisdiction, Year, cov_tax_CO2_jurCO2, cov_ets_CO2_jurCO2, cov_all_CO2_jurCO2)
df <- left_join(ecp_sel, tcov_sel, by = c("Jurisdiction", "Year")) %>%
rename(region = Jurisdiction,
year = Year,
ecp_tax = ecp_tax_jurCO2_2019USD,
ecp_ets = ecp_ets_jurCO2_2019USD,
ecp_all = ecp_all_jurCO2_2019USD,
cov_tax = cov_tax_CO2_jurCO2,
cov_ets = cov_ets_CO2_jurCO2,
cov_all = cov_all_CO2_jurCO2)
# mutate(region = str_remove(region, ",.*$"))
# Country codes
codes <- read_csv("https://gist.githubusercontent.com/tadast/8827699/raw/f5cac3d42d16b78348610fc4ec301e9234f82821/countries_codes_and_coordinates.csv")
missing_names <- read_xlsx("alternative_names.xlsx")
geocoded_df <- left_join(df, codes, by = c("region" = "Country")) %>%
rename(alpha_2 = `Alpha-2 code`,
alpha_3 = `Alpha-3 code`,
num_code = `Numeric code`,
ctry_avg_lat = `Latitude (average)`,
ctry_avg_long = `Longitude (average)`)
geocoded_df <- stringdist_left_join(geocoded_df, missing_names, by = c("region" = "ECP")) %>%
mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true","false")) %>%
mutate(region = case_when(region == "Yukon" ~ "Yukon Territory",
TRUE ~ region))
# Processed price data
write.csv(geocoded_df, "processed_data.csv")
# Local record of data dependencies
write.csv(ecp, "./local_copy_data_dependencies/ecp.csv")
write.csv(tcov, "./local_copy_data_dependencies/tcov.csv")
write.csv(codes, "./local_copy_data_dependencies/countries_codes_and_coordinates.csv")
######
# Download world geojson, merge price data, and export
######
# gjsf <- st_read("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson")
#
# # Local record of data dependencies
# st_write(gjsf, "./local_copy_data_dependencies/world.geojson")
#
# #Save priced worldmap
# gjsf_priced <- left_join(gjsf, geocoded_df, by = c("id" = "alpha_3"))
#
# gjsf_priced %>%
#   group_by(region) %>%
#   mutate(outline = case_when(year == max(year) ~  "true",
#                              TRUE ~ "false")
#         )
#
#
# st_write(gjsf_priced, "merged.geojson")
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/total_coverage.csv")
tcov
ecp_sel <- ecp %>% select(Jurisdiction, Year, ecp_tax_jurCO2_2019USD, ecp_ets_jurCO2_2019USD, ecp_all_jurCO2_2019USD)
tcov_sel <- tcov %>% select(Jurisdiction, Year, cov_tax_CO2_jurCO2, cov_ets_CO2_jurCO2, cov_all_CO2_jurCO2)
df <- left_join(ecp_sel, tcov_sel, by = c("Jurisdiction", "Year")) %>%
rename(region = Jurisdiction,
year = Year,
ecp_tax = ecp_tax_jurCO2_2019USD,
ecp_ets = ecp_ets_jurCO2_2019USD,
ecp_all = ecp_all_jurCO2_2019USD,
cov_tax = cov_tax_CO2_jurCO2,
cov_ets = cov_ets_CO2_jurCO2,
cov_all = cov_all_CO2_jurCO2)
df
df$cov_tax
df %>% filter(cov_tax < 0.01)
df %>% filter(cov_tax < 0.01 & cov_tax > 0)
df %>% filter(cov_ets < 0.01 & cov_ets > 0)
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
######
### Download, clean, and merge price data
######
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp.csv")
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp_CO2.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/tot_coverage_jurisdiction_CO2.csv")
ecp_sel <- ecp %>% select(Jurisdiction, Year, ecp_tax_jurCO2_2019USD, ecp_ets_jurCO2_2019USD, ecp_all_jurCO2_2019USD)
ecp
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
######
### Download, clean, and merge price data
######
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp_CO2.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/tot_coverage_jurisdiction_CO2.csv")
ecp_sel <- ecp %>% select(Jurisdiction, Year, ecp_tax_jurCO2_kusd, ecp_ets_jurCO2_kusd, ecp_all_jurCO2_kusd)
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
######
### Download, clean, and merge price data
######
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp_CO2.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/tot_coverage_jurisdiction_CO2.csv")
ecp_sel <- ecp %>% select(jurisdiction, Year, ecp_tax_jurCO2_kusd, ecp_ets_jurCO2_kusd, ecp_all_jurCO2_kusd)
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
######
### Download, clean, and merge price data
######
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp_CO2.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/tot_coverage_jurisdiction_CO2.csv")
ecp_sel <- ecp %>% select(jurisdiction, year, ecp_tax_jurCO2_kusd, ecp_ets_jurCO2_kusd, ecp_all_jurCO2_kusd)
tcov_sel <- tcov %>% select(jurisdiction, year, cov_tax_CO2_jurCO2, cov_ets_CO2_jurCO2, cov_all_CO2_jurCO2)
df <- left_join(ecp_sel, tcov_sel, by = c("jurisdiction", "year")) %>%
rename(region = jurisdiction,
year = year,
ecp_tax = ecp_tax_jurCO2_kusd,
ecp_ets = ecp_ets_jurCO2_kusd,
ecp_all = ecp_all_jurCO2_kusd,
cov_tax = cov_tax_CO2_jurCO2,
cov_ets = cov_ets_CO2_jurCO2,
cov_all = cov_all_CO2_jurCO2)
# mutate(region = str_remove(region, ",.*$"))
# Country codes
codes <- read_csv("https://gist.githubusercontent.com/tadast/8827699/raw/f5cac3d42d16b78348610fc4ec301e9234f82821/countries_codes_and_coordinates.csv")
missing_names <- read_xlsx("alternative_names.xlsx")
geocoded_df <- left_join(df, codes, by = c("region" = "Country")) %>%
rename(alpha_2 = `Alpha-2 code`,
alpha_3 = `Alpha-3 code`,
num_code = `Numeric code`,
ctry_avg_lat = `Latitude (average)`,
ctry_avg_long = `Longitude (average)`)
geocoded_df <- stringdist_left_join(geocoded_df, missing_names, by = c("region" = "ECP")) %>%
mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true","false")) %>%
mutate(region = case_when(region == "Yukon" ~ "Yukon Territory",
TRUE ~ region))
# Processed price data
write.csv(geocoded_df, "processed_data.csv")
# Local record of data dependencies
write.csv(ecp, "./local_copy_data_dependencies/ecp.csv")
write.csv(tcov, "./local_copy_data_dependencies/tcov.csv")
write.csv(codes, "./local_copy_data_dependencies/countries_codes_and_coordinates.csv")
library(httr)
GET("https://github.com/g-dolphin/ECP/tree/master/_raw/wcpd_usd/CO2")
setwd("~/Documents/Github_repos/rff_carbon/rff_carbon_price_sectoral/data")
library(tidyverse)
library(rjson)
library(jsonlite)
source('jurigroups.R')
all_files <- list.files('wcpd_usd')
df <- read_csv(paste0('./wcpd_usd/',all_files[1]))
for (file in  all_files[2:length(all_files)]){
df <- df %>% rbind(read_csv(paste0('./wcpd_usd/',file)))
}
df2 <- df %>%
select(jurisdiction, year, ipcc_code, Product, tax_rate_incl_ex_kusd, ets_price_kusd) %>%
filter( !( is.na(tax_rate_incl_ex_kusd) & is.na(ets_price_kusd)) )
df2 <- df2 %>%
mutate(jurtype = case_when(
jurisdiction %in% subnat_chn ~ "subnat_chn",
jurisdiction %in% subnat_can ~ "subnat_can",
jurisdiction %in% subnat_usa ~ "subnat_usa",
jurisdiction %in% subnat_jpn ~ "subnat_jpn",
jurisdiction %in% subnat_mex ~ "subnat_mex",
TRUE ~ "country"
))
for(y in df$year %>% unique()){
df_year <- df2 %>% filter(year == y)
write_csv(df_year, paste0(y, ".csv"))
}
df2 %>%
select(jurisdiction, jurtype) %>%
distinct(jurisdiction, jurtype) %>%
write.csv('jurisdictions.csv')
df <- read_csv('https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_sectors/ecp_sector_CO2.csv') #https://github.com/g-dolphin/ECP/tree/master/_dataset/price/ecp_sectors
df2 <- df %>% select(-CO2_sharesec,-iea_code)
all_juri <- df2$jurisdiction %>% unique()
all_juri <- tibble(jurisdiction = all_juri)
write_csv(all_juri, 'jurisdiction.csv')
ecp_tax <- df2 %>%
select(-ecp_ets_kusd, -ecp_all_kusd) %>%
group_by(jurisdiction, ipcc_code) %>%
filter(any(ecp_tax_kusd > 0 & !is.na(ecp_tax_kusd))) %>%
rename(price = ecp_tax_kusd) %>%
ungroup() %>%
mutate(price = case_when(price == 0 | is.na(price) ~ 'null',
TRUE ~ as.character(price))
)
ecp_ets <- df2 %>%
select(-ecp_tax_kusd, -ecp_all_kusd) %>%
group_by(jurisdiction, ipcc_code) %>%
filter(any(ecp_ets_kusd > 0 & !is.na(ecp_ets_kusd))) %>%
rename(price = ecp_ets_kusd) %>%
ungroup() %>%
mutate(price = case_when(price == 0 | is.na(price) ~ 'null',
TRUE ~ as.character(price))
)
ecp_both <- df2 %>%
select(-ecp_tax_kusd, -ecp_ets_kusd) %>%
group_by(jurisdiction, ipcc_code) %>%
filter(any(ecp_all_kusd > 0 & !is.na(ecp_all_kusd))) %>%
rename(price = ecp_all_kusd) %>%
ungroup() %>%
mutate(price = case_when(price == 0 | is.na(price) ~ 'null',
TRUE ~ as.character(price))
)
write_csv(ecp_tax, 'ecp_tax.csv')
write_csv(ecp_ets, 'ecp_ets.csv')
write_csv(ecp_both, 'ecp_both.csv')
active_juri <- c(ecp_tax$jurisdiction, ecp_ets$jurisdiction, ecp_both$jurisdiction) %>% unique()
active_juri <- tibble(jurisdiction = active_juri)
write_csv(active_juri, 'active_juri.csv')
getwd()
setwd("~/Documents/Github_repos/rff_carbon/rff_carbon_price_historical/data")
library(tidyverse)
df <- read_csv('https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_sectors/ecp_sector_CO2.csv') #https://github.com/g-dolphin/ECP/tree/master/_dataset/price/ecp_sectors
df2 <- df %>% select(-CO2_sharesec,-iea_code)
all_juri <- df2$jurisdiction %>% unique()
all_juri <- tibble(jurisdiction = all_juri)
write_csv(all_juri, 'jurisdiction.csv')
ecp_tax <- df2 %>%
select(-ecp_ets_kusd, -ecp_all_kusd) %>%
group_by(jurisdiction, ipcc_code) %>%
filter(any(ecp_tax_kusd > 0 & !is.na(ecp_tax_kusd))) %>%
rename(price = ecp_tax_kusd) %>%
ungroup() %>%
mutate(price = case_when(price == 0 | is.na(price) ~ 'null',
TRUE ~ as.character(price))
)
ecp_ets <- df2 %>%
select(-ecp_tax_kusd, -ecp_all_kusd) %>%
group_by(jurisdiction, ipcc_code) %>%
filter(any(ecp_ets_kusd > 0 & !is.na(ecp_ets_kusd))) %>%
rename(price = ecp_ets_kusd) %>%
ungroup() %>%
mutate(price = case_when(price == 0 | is.na(price) ~ 'null',
TRUE ~ as.character(price))
)
ecp_both <- df2 %>%
select(-ecp_tax_kusd, -ecp_ets_kusd) %>%
group_by(jurisdiction, ipcc_code) %>%
filter(any(ecp_all_kusd > 0 & !is.na(ecp_all_kusd))) %>%
rename(price = ecp_all_kusd) %>%
ungroup() %>%
mutate(price = case_when(price == 0 | is.na(price) ~ 'null',
TRUE ~ as.character(price))
)
write_csv(ecp_tax, 'ecp_tax.csv')
write_csv(ecp_ets, 'ecp_ets.csv')
write_csv(ecp_both, 'ecp_both.csv')
active_juri <- c(ecp_tax$jurisdiction, ecp_ets$jurisdiction, ecp_both$jurisdiction) %>% unique()
active_juri <- tibble(jurisdiction = active_juri)
write_csv(active_juri, 'active_juri.csv')
library(rjson)
myData <- fromJSON(file="gadm36_CHN_1.json")
setwd("~/Documents/Github_repos/rff_carbon/rff_carbon_price_map/data")
myData <- fromJSON(file="gadm36_CHN_1.json")
myData
library(jsonlite)
myData <- fromJSON(file="gadm36_CHN_1.json") %>% as.data.frame()
library(tidyverse)
t
myData
myData
myData <- fromJSON(file="gadm36_CHN_1.json") %>% as.data.frame()
myData
myData <- fromJSON(file="gadm36_CHN_1.json") %>% as.data.frame()
myData <- fromJSON(file="gadm36_CHN_1.json") %>% as.data.frame
myData <- fromJSON(file="gadm36_CHN_1.json")
myData
myData <- fromJSON("gadm36_CHN_1.json")
myData
myData <- fromJSON("gadm36_CHN_1.json") %>% as.data.frame()
myData
myData <- fromJSON("gadm36_CHN_1.json") %>% tibble()
myData
as.data.frame
myData <- fromJSON("gadm36_CHN_1.json") %>% as.data.frame()
myData
myData %>% head()
myData$features.properties.NAME_1
myData %>% select(features.properties.NAME_1)
myData <- fromJSON("gadm36_CHN_1.json") %>% as.data.frame() %>% as_tibble()
myData
myData <- fromJSON("gadm36_CHN_1.json") %>% as_tibble()
myData
myData$$$NAME_1
myData %>% select(`$$NAME_1`)
myData %>% select(`NAME_1`)
myData %>% select(`$NAME_1`)
myData %>% select(`NAME_1`)
myData %>% select(NAME_1)
myData
myData %>% attributes()
myData %>% colnames()
myData %>% select(features)
myData
fromJSON("gadm36_CHN_1.json")
myData %>% select(featuresproperties.NAME_1 )
myData %>% select(features.properties.NAME_1 )
myData %>% select(features$$properties.NAME_1 )
myData %>% select(features$$NAME_1 )
myData %>% select(features$$NAME_1)
myData %>% select(features)
myData %>% select(names)
myData %>% select(types)
myData %>% select(type)
myData %>% select(features)
myData %>% select(types)
myData %>% select(type)
myData %>% select(features)
myData %>% select(features) %>% select($$NAME_1)
myData %>% select(features) %>% select(NAME_1)
myData %>% select(features) %>% select(`$$NAME_1`)
myData %>% select(features) %>% select(`$NAME_1`)
myData
myData %>% select(features$type)
myData %>% select(`features$type`)
library(tidyjson)
install.packages('tidyjson')
library(tidyjson)
myData <- read_json("gadm36_CHN_1.json")
myData
myData %>% %>% spread_all
myData %>% spread_all
myData %>% spread_all %>% spread_all
myData %>% spread_values
worldbank %>% spread_all %>% select(geometry, NAME_1)
worldbank %>% spread_all %>% select(NAME_1)
worldbank %>% spread_all %>% select('NAME_1')
myData <- fromJSON("gadm36_CHN_1.json") %>% as_tibble()
myData
myData <- fromJSON("gadm36_CHN_1.json") %>% as.data.frame
myData
myData$features
myData$feature
myData[[0]]
myData[[1]]
myData[[2]]
myData[[3]]
myData[[4]]
fromJSON("gadm36_CHN_1.json")
myData <- fromJSON("gadm36_CHN_1.json")
myData[[1]]
myData[[3]]
myData[[2]]
myData[[2]][[1]]
myData[[2]][[2]]
myData[[2]][[3]]
myData[[2]][[3]]$NAME_1
modData[[2]][[3]] %>% select(NAME_1)
modData <- myData
modData[[2]][[3]] %>% select(NAME_1)
modData[[2]][[3]] <- modData[[2]][[3]] %>% select(NAME_1)
modData[[2]][[3]]
modData[[2]]
toJSON(modDATA, "modDATA_test.json")
toJSON(modDATA)
toJSON(modData)
write_json(modData, "test_mod.json")
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp_CO2.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/tot_coverage_jurisdiction_CO2.csv")
ecp_sel <- ecp %>% select(jurisdiction, year, ecp_tax_jurCO2_kusd, ecp_ets_jurCO2_kusd, ecp_all_jurCO2_kusd)
tcov_sel <- tcov %>% select(jurisdiction, year, cov_tax_CO2_jurCO2, cov_ets_CO2_jurCO2, cov_all_CO2_jurCO2)
df <- left_join(ecp_sel, tcov_sel, by = c("jurisdiction", "year")) %>%
rename(region = jurisdiction,
year = year,
ecp_tax = ecp_tax_jurCO2_kusd,
ecp_ets = ecp_ets_jurCO2_kusd,
ecp_all = ecp_all_jurCO2_kusd,
cov_tax = cov_tax_CO2_jurCO2,
cov_ets = cov_ets_CO2_jurCO2,
cov_all = cov_all_CO2_jurCO2)
# Country codes
codes <- read_csv("https://gist.githubusercontent.com/tadast/8827699/raw/f5cac3d42d16b78348610fc4ec301e9234f82821/countries_codes_and_coordinates.csv")
missing_names <- read_xlsx("alternative_names.xlsx")
geocoded_df <- left_join(df, codes, by = c("region" = "Country")) %>%
rename(alpha_2 = `Alpha-2 code`,
alpha_3 = `Alpha-3 code`,
num_code = `Numeric code`,
ctry_avg_lat = `Latitude (average)`,
ctry_avg_long = `Longitude (average)`)
geocoded_df <- stringdist_left_join(geocoded_df, missing_names, by = c("region" = "ECP")) %>%
mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true", "false")) %>%
mutate(region = case_when(region == "Yukon" ~ "Yukon Territory",
TRUE ~ region))
geocoded_df %>% filter(country)
geocoded_df
geocoded_df
geocoded_df %>% filter(country)
geocoded_df
geocoded_df <- stringdist_left_join(geocoded_df, missing_names, by = c("region" = "ECP")) %>%
mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true", "false")) %>%
mutate(region = case_when(region == "Yukon" ~ "Yukon Territory",
TRUE ~ region))
library(tidyverse)
library(sf)
library(fuzzyjoin)
library(readxl)
library(jsonlite)
geocoded_df <- stringdist_left_join(geocoded_df, missing_names, by = c("region" = "ECP")) %>%
mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true", "false")) %>%
mutate(region = case_when(region == "Yukon" ~ "Yukon Territory",
TRUE ~ region))
ecp <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/price/ecp_economy/ecp_CO2.csv")
tcov <- read_csv("https://raw.githubusercontent.com/g-dolphin/ECP/master/_dataset/coverage/tot_coverage_jurisdiction_CO2.csv")
ecp_sel <- ecp %>% select(jurisdiction, year, ecp_tax_jurCO2_kusd, ecp_ets_jurCO2_kusd, ecp_all_jurCO2_kusd)
tcov_sel <- tcov %>% select(jurisdiction, year, cov_tax_CO2_jurCO2, cov_ets_CO2_jurCO2, cov_all_CO2_jurCO2)
df <- left_join(ecp_sel, tcov_sel, by = c("jurisdiction", "year")) %>%
rename(region = jurisdiction,
year = year,
ecp_tax = ecp_tax_jurCO2_kusd,
ecp_ets = ecp_ets_jurCO2_kusd,
ecp_all = ecp_all_jurCO2_kusd,
cov_tax = cov_tax_CO2_jurCO2,
cov_ets = cov_ets_CO2_jurCO2,
cov_all = cov_all_CO2_jurCO2)
# Country codes
codes <- read_csv("https://gist.githubusercontent.com/tadast/8827699/raw/f5cac3d42d16b78348610fc4ec301e9234f82821/countries_codes_and_coordinates.csv")
missing_names <- read_xlsx("alternative_names.xlsx")
geocoded_df <- left_join(df, codes, by = c("region" = "Country")) %>%
rename(alpha_2 = `Alpha-2 code`,
alpha_3 = `Alpha-3 code`,
num_code = `Numeric code`,
ctry_avg_lat = `Latitude (average)`,
ctry_avg_long = `Longitude (average)`)
geocoded_df <- stringdist_left_join(geocoded_df, missing_names, by = c("region" = "ECP")) %>%
mutate(alpha_3 = case_when(is.na(alpha_3) ~ Codes,
TRUE ~ alpha_3)) %>%
select(-ECP, -Codes) %>%
mutate(country = ifelse(!is.na(alpha_3), "true", "false")) %>%
mutate(region = case_when(region == "Yukon" ~ "Yukon Territory",
TRUE ~ region))
geocoded_df
geocoded_df %>% filter(country == 'false')
geocoded_df %>% filter(country == 'false') %>% View()
geocoded_df
geocoded_df %>% filter(country == 'china')
geocoded_df %>% filter(region == 'China')
geocoded_df %>% filter(ctry_avg_lat> 30 & ctry_avg_lat < 40 & ctry_avg_long > 100 & ctry_avg_long < 110)
modData[[2]][[3]] <- modData[[2]][[3]] %>% select(NAME_1) %>% mutate(NAME_1 = up_china_names)
up_china_names <- c("Anhui Province"    ,      "Beijing Municipality"    ,   "Chongqing Municipality"  ,    "Fujian Province"       ,  "Gansu Province" ,
"Guangdong Province"   ,   "Guangxi Zhuang Autonomous Region"     ,   "Guizhou Province"     ,   "Hainan Province"     ,
"Hebei Province"     ,     "Heilongjiang Province" ,  "Henan Province"     ,     "Hubei Province"    ,      "Hunan Province"   ,
"Jiangsu Province"   ,     "Jiangxi Province"   ,     "Jilin Province"    ,      "Liaoning Province"   ,
"Inner Mongolia Autonomous Region"  ,   "Ningxia Hui Autonomous Region"  ,  "Qinghai Province"    ,    "Shaanxi Province"   ,
"Shandong Province"    ,   "Shanghai Municipality"   ,    "Shaanxi Province"    ,     "Sichuan Province"   ,     "Tianjin Municipality"     ,
"Xinjiang Uyghur Autonomous Region" , "Tibet Autonomous Region"      ,   "Yunnan Province"  ,       "Zhejiang Province")
modData[[2]][[3]] <- modData[[2]][[3]] %>% select(NAME_1) %>% mutate(NAME_1 = up_china_names)
write_json(modData, "gadm36_CHN_1_upnames.json")
